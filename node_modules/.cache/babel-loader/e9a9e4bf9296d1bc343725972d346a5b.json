{"ast":null,"code":"var _jsxFileName = \"/Users/geoffwaddington/Desktop/Wordlers/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { InformationCircleIcon, ChartBarIcon, SunIcon } from '@heroicons/react/outline';\nimport { useState, useEffect } from 'react';\nimport { Alert } from './components/alerts/Alert';\nimport { Grid } from './components/grid/Grid';\nimport { Keyboard } from './components/keyboard/Keyboard';\nimport { InfoModal } from './components/modals/InfoModal';\nimport { StatsModal } from './components/modals/StatsModal';\nimport { GAME_TITLE, WIN_MESSAGES, GAME_COPIED_MESSAGE, NOT_ENOUGH_LETTERS_MESSAGE, WORD_NOT_FOUND_MESSAGE, CORRECT_WORD_MESSAGE } from './constants/strings';\nimport { isWordInWordList, isWinningWord, solution } from './lib/words';\nimport { addStatsForCompletedGame, loadStats } from './lib/stats';\nimport { loadGameStateFromLocalStorage, saveGameStateToLocalStorage } from './lib/localStorage';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ALERT_TIME_MS = 2000;\n\nfunction App() {\n  _s();\n\n  const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [isGameWon, setIsGameWon] = useState(false);\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(localStorage.getItem('showInfo') !== null ? localStorage.getItem('showInfo') == 'true' ? true : false : true);\n  const [isNotEnoughLetters, setIsNotEnoughLetters] = useState(false);\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false);\n  const [isWordNotFoundAlertOpen, setIsWordNotFoundAlertOpen] = useState(false);\n  const [isGameLost, setIsGameLost] = useState(false);\n  const [isEasyMode, setIsEasyMode] = useState(false);\n  const [isDarkMode, setIsDarkMode] = useState(localStorage.getItem('theme') ? localStorage.getItem('theme') === 'dark' : prefersDarkMode ? true : false);\n  const [successAlert, setSuccessAlert] = useState('');\n  const [guesses, setGuesses] = useState(() => {\n    const loaded = loadGameStateFromLocalStorage();\n\n    if ((loaded === null || loaded === void 0 ? void 0 : loaded.solution) !== solution) {\n      return [];\n    }\n\n    const gameWasWon = loaded.guesses.includes(solution);\n\n    if (gameWasWon) {\n      setIsGameWon(true);\n    }\n\n    if (loaded.guesses.length === 6 && !gameWasWon) {\n      setIsGameLost(true);\n    }\n\n    return loaded.guesses;\n  });\n  const [stats, setStats] = useState(() => loadStats());\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [isDarkMode]);\n\n  const handleIsEasykMode = isEasy => {\n    setIsEasyMode(isEasy);\n  };\n\n  const handleDarkMode = isDark => {\n    setIsDarkMode(isDark);\n    localStorage.setItem('theme', isDark ? 'dark' : 'light');\n  };\n\n  useEffect(() => {\n    saveGameStateToLocalStorage({\n      guesses,\n      solution\n    });\n  }, [guesses]);\n  useEffect(() => {\n    if (isGameWon) {\n      setSuccessAlert(WIN_MESSAGES[Math.floor(Math.random() * WIN_MESSAGES.length)]);\n      setTimeout(() => {\n        setSuccessAlert('');\n        setIsStatsModalOpen(true);\n      }, ALERT_TIME_MS);\n    }\n\n    if (isGameLost) {\n      setTimeout(() => {\n        setIsStatsModalOpen(true);\n      }, ALERT_TIME_MS);\n    }\n  }, [isGameWon, isGameLost]);\n\n  const onChar = value => {\n    if (guesses.length < 6 && !isGameWon) {\n      let index = currentGuess.indexOf(' ');\n      if (index > -1) setCurrentGuess(currentGuess.substring(0, index) + value + currentGuess.substring(index + 1));else if (currentGuess.length < 5) setCurrentGuess(`${currentGuess}${value}`);\n    }\n  };\n\n  const onDeleteLetter = index => {\n    setCurrentGuess(currentGuess.substring(0, index) + ' ' + currentGuess.substring(index + 1));\n  };\n\n  const onEnter = () => {\n    localStorage.setItem('showInfo', 'false');\n\n    if (isGameWon || isGameLost) {\n      return;\n    }\n\n    if (!(currentGuess.length === 5)) {\n      setIsNotEnoughLetters(true);\n      return setTimeout(() => {\n        setIsNotEnoughLetters(false);\n      }, ALERT_TIME_MS);\n    }\n\n    if (!isWordInWordList(currentGuess)) {\n      setIsWordNotFoundAlertOpen(true);\n      return setTimeout(() => {\n        setIsWordNotFoundAlertOpen(false);\n      }, ALERT_TIME_MS);\n    }\n\n    const winningWord = isWinningWord(currentGuess);\n\n    if (currentGuess.length === 5 && guesses.length < 6 && !isGameWon) {\n      setGuesses([...guesses, currentGuess]);\n      setCurrentGuess('');\n\n      if (winningWord) {\n        setStats(addStatsForCompletedGame(stats, guesses.length));\n        return setIsGameWon(true);\n      }\n\n      if (guesses.length === 5) {\n        setStats(addStatsForCompletedGame(stats, guesses.length + 1));\n        setIsGameLost(true);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"py-8 max-w-7xl mx-auto sm:px-6 lg:px-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex w-80 mx-auto items-center mb-8 mt-12\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-xl ml-2 grow dark:text-white\",\n        children: GAME_TITLE\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SunIcon, {\n        className: \"h-6 w-6 ml-2 cursor-pointer dark:stroke-white\",\n        onClick: () => handleDarkMode(!isDarkMode)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InformationCircleIcon, {\n        className: \"h-6 w-6 ml-2 cursor-pointer dark:stroke-white\",\n        onClick: () => setIsInfoModalOpen(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartBarIcon, {\n        className: \"h-6 w-6 ml-2 mr-2 cursor-pointer dark:stroke-white\",\n        onClick: () => setIsStatsModalOpen(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      guesses: guesses,\n      currentGuess: currentGuess,\n      onDeleteLetter: onDeleteLetter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      onChar: onChar,\n      onEnter: onEnter,\n      guesses: guesses,\n      isEasyMode: isEasyMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoModal, {\n      isOpen: isInfoModalOpen,\n      handleClose: () => setIsInfoModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatsModal, {\n      isOpen: isStatsModalOpen,\n      handleClose: () => setIsStatsModalOpen(false),\n      guesses: guesses,\n      gameStats: stats,\n      isGameLost: isGameLost,\n      isGameWon: isGameWon,\n      handleShare: () => {\n        setSuccessAlert(GAME_COPIED_MESSAGE);\n        return setTimeout(() => setSuccessAlert(''), ALERT_TIME_MS);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: NOT_ENOUGH_LETTERS_MESSAGE,\n      isOpen: isNotEnoughLetters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: WORD_NOT_FOUND_MESSAGE,\n      isOpen: isWordNotFoundAlertOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: CORRECT_WORD_MESSAGE(solution),\n      isOpen: isGameLost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: successAlert,\n      isOpen: successAlert !== '',\n      variant: \"success\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"vwHoJ+xmdsByuCPdS96v+I0V0yc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/geoffwaddington/Desktop/Wordlers/src/App.tsx"],"names":["InformationCircleIcon","ChartBarIcon","SunIcon","useState","useEffect","Alert","Grid","Keyboard","InfoModal","StatsModal","GAME_TITLE","WIN_MESSAGES","GAME_COPIED_MESSAGE","NOT_ENOUGH_LETTERS_MESSAGE","WORD_NOT_FOUND_MESSAGE","CORRECT_WORD_MESSAGE","isWordInWordList","isWinningWord","solution","addStatsForCompletedGame","loadStats","loadGameStateFromLocalStorage","saveGameStateToLocalStorage","ALERT_TIME_MS","App","prefersDarkMode","window","matchMedia","matches","currentGuess","setCurrentGuess","isGameWon","setIsGameWon","isInfoModalOpen","setIsInfoModalOpen","localStorage","getItem","isNotEnoughLetters","setIsNotEnoughLetters","isStatsModalOpen","setIsStatsModalOpen","isWordNotFoundAlertOpen","setIsWordNotFoundAlertOpen","isGameLost","setIsGameLost","isEasyMode","setIsEasyMode","isDarkMode","setIsDarkMode","successAlert","setSuccessAlert","guesses","setGuesses","loaded","gameWasWon","includes","length","stats","setStats","document","documentElement","classList","add","remove","handleIsEasykMode","isEasy","handleDarkMode","isDark","setItem","Math","floor","random","setTimeout","onChar","value","index","indexOf","substring","onDeleteLetter","onEnter","winningWord"],"mappings":"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","sourcesContent":["import {\n  InformationCircleIcon,\n  ChartBarIcon,\n  SunIcon,\n} from '@heroicons/react/outline'\nimport { useState, useEffect } from 'react'\nimport { Alert } from './components/alerts/Alert'\nimport { Grid } from './components/grid/Grid'\nimport { Keyboard } from './components/keyboard/Keyboard'\nimport { InfoModal } from './components/modals/InfoModal'\nimport { StatsModal } from './components/modals/StatsModal'\nimport {\n  GAME_TITLE,\n  WIN_MESSAGES,\n  GAME_COPIED_MESSAGE,\n  NOT_ENOUGH_LETTERS_MESSAGE,\n  WORD_NOT_FOUND_MESSAGE,\n  CORRECT_WORD_MESSAGE,\n} from './constants/strings'\nimport { isWordInWordList, isWinningWord, solution } from './lib/words'\nimport { addStatsForCompletedGame, loadStats } from './lib/stats'\nimport {\n  loadGameStateFromLocalStorage,\n  saveGameStateToLocalStorage,\n} from './lib/localStorage'\n\nimport './App.css'\n\nconst ALERT_TIME_MS = 2000\n\nfunction App() {\n  const prefersDarkMode = window.matchMedia(\n    '(prefers-color-scheme: dark)'\n  ).matches\n\n  const [currentGuess, setCurrentGuess] = useState('')\n  const [isGameWon, setIsGameWon] = useState(false)\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(localStorage.getItem('showInfo') !== null ? (localStorage.getItem('showInfo') == 'true' ? true : false) : true)\n  const [isNotEnoughLetters, setIsNotEnoughLetters] = useState(false)\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false)\n  const [isWordNotFoundAlertOpen, setIsWordNotFoundAlertOpen] = useState(false)\n  const [isGameLost, setIsGameLost] = useState(false)\n  const [isEasyMode, setIsEasyMode] = useState(false)\n  const [isDarkMode, setIsDarkMode] = useState(\n    localStorage.getItem('theme')\n      ? localStorage.getItem('theme') === 'dark'\n      : prefersDarkMode\n      ? true\n      : false\n  )\n  const [successAlert, setSuccessAlert] = useState('')\n  const [guesses, setGuesses] = useState<string[]>(() => {\n    const loaded = loadGameStateFromLocalStorage()\n    if (loaded?.solution !== solution) {\n      return []\n    }\n    const gameWasWon = loaded.guesses.includes(solution)\n    if (gameWasWon) {\n      setIsGameWon(true)\n    }\n    if (loaded.guesses.length === 6 && !gameWasWon) {\n      setIsGameLost(true)\n    }\n    return loaded.guesses\n  })\n\n  const [stats, setStats] = useState(() => loadStats())\n\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark')\n    } else {\n      document.documentElement.classList.remove('dark')\n    }\n  }, [isDarkMode])\n\n  const handleIsEasykMode = (isEasy: boolean) => {\n    setIsEasyMode(isEasy)\n  }\n\n  const handleDarkMode = (isDark: boolean) => {\n    setIsDarkMode(isDark)\n    localStorage.setItem('theme', isDark ? 'dark' : 'light')\n  }\n\n  useEffect(() => {\n    saveGameStateToLocalStorage({ guesses, solution })\n  }, [guesses])\n\n  useEffect(() => {\n    if (isGameWon) {\n      setSuccessAlert(\n        WIN_MESSAGES[Math.floor(Math.random() * WIN_MESSAGES.length)]\n      )\n      setTimeout(() => {\n        setSuccessAlert('')\n        setIsStatsModalOpen(true)\n      }, ALERT_TIME_MS)\n    }\n    if (isGameLost) {\n      setTimeout(() => {\n        setIsStatsModalOpen(true)\n      }, ALERT_TIME_MS)\n    }\n  }, [isGameWon, isGameLost])\n\n  const onChar = (value: string) => {\n    if (guesses.length < 6 && !isGameWon) {\n      let index = currentGuess.indexOf(' ')\n\n      if(index > -1)\n        setCurrentGuess(currentGuess.substring(0, index) + value + currentGuess.substring(index + 1))\n      else if(currentGuess.length < 5)\n        setCurrentGuess(`${currentGuess}${value}`)\n    }\n  }\n\n  const onDeleteLetter = (index: number) => {\n    setCurrentGuess(currentGuess.substring(0, index) + ' ' + currentGuess.substring(index + 1))\n  }\n\n  const onEnter = () => {\n    localStorage.setItem('showInfo', 'false')\n    if (isGameWon || isGameLost) {\n      return\n    }\n    if (!(currentGuess.length === 5)) {\n      setIsNotEnoughLetters(true)\n      return setTimeout(() => {\n        setIsNotEnoughLetters(false)\n      }, ALERT_TIME_MS)\n    }\n\n    if (!isWordInWordList(currentGuess)) {\n      setIsWordNotFoundAlertOpen(true)\n      return setTimeout(() => {\n        setIsWordNotFoundAlertOpen(false)\n      }, ALERT_TIME_MS)\n    }\n\n    const winningWord = isWinningWord(currentGuess)\n\n    if (currentGuess.length === 5 && guesses.length < 6 && !isGameWon) {\n      setGuesses([...guesses, currentGuess])\n      setCurrentGuess('')\n\n      if (winningWord) {\n        setStats(addStatsForCompletedGame(stats, guesses.length))\n        return setIsGameWon(true)\n      }\n\n      if (guesses.length === 5) {\n        setStats(addStatsForCompletedGame(stats, guesses.length + 1))\n        setIsGameLost(true)\n      }\n    }\n  }\n  \n  return (\n    <div className=\"py-8 max-w-7xl mx-auto sm:px-6 lg:px-8\">\n      <div className=\"flex w-80 mx-auto items-center mb-8 mt-12\">\n        <h1 className=\"text-xl ml-2 grow dark:text-white\">{GAME_TITLE}</h1>\n        <SunIcon\n          className=\"h-6 w-6 ml-2 cursor-pointer dark:stroke-white\"\n          onClick={() => handleDarkMode(!isDarkMode)}\n        />\n        <InformationCircleIcon\n          className=\"h-6 w-6 ml-2 cursor-pointer dark:stroke-white\"\n          onClick={() => setIsInfoModalOpen(true)}\n        />\n        <ChartBarIcon\n          className=\"h-6 w-6 ml-2 mr-2 cursor-pointer dark:stroke-white\"\n          onClick={() => setIsStatsModalOpen(true)}\n        />\n      </div>\n      <Grid \n        guesses={guesses} \n        currentGuess={currentGuess} \n        onDeleteLetter={onDeleteLetter}\n      />\n      <Keyboard\n        onChar={onChar}\n        onEnter={onEnter}\n        guesses={guesses}\n        isEasyMode={isEasyMode}\n      />\n      <InfoModal\n        isOpen={isInfoModalOpen}\n        handleClose={() => setIsInfoModalOpen(false)}\n      />\n      <StatsModal\n        isOpen={isStatsModalOpen}\n        handleClose={() => setIsStatsModalOpen(false)}\n        guesses={guesses}\n        gameStats={stats}\n        isGameLost={isGameLost}\n        isGameWon={isGameWon}\n        handleShare={() => {\n          setSuccessAlert(GAME_COPIED_MESSAGE)\n          return setTimeout(() => setSuccessAlert(''), ALERT_TIME_MS)\n        }}\n      />\n\n      <Alert message={NOT_ENOUGH_LETTERS_MESSAGE} isOpen={isNotEnoughLetters} />\n      <Alert\n        message={WORD_NOT_FOUND_MESSAGE}\n        isOpen={isWordNotFoundAlertOpen}\n      />\n      <Alert message={CORRECT_WORD_MESSAGE(solution)} isOpen={isGameLost} />\n      <Alert\n        message={successAlert}\n        isOpen={successAlert !== ''}\n        variant=\"success\"\n      />\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}